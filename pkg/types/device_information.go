// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCES:
 *     campaign_finance.avsc
 *     clickstream.avsc
 *     clickstream_codes.avsc
 *     clickstream_users.avsc
 *     creditcards.avsc
 *     device_information.avsc
 *     fleet_mgmt_description.avsc
 *     fleet_mgmt_location.avsc
 *     fleet_mgmt_sensors.avsc
 *     gaming_games.avsc
 *     gaming_player_activity.avsc
 *     gaming_players.avsc
 *     insurance_customer_activity.avsc
 *     insurance_customers.avsc
 *     insurance_offers.avsc
 *     inventory.avsc
 *     map_dumb_schema.avsc
 *     net_device.avsc
 *     orders.avsc
 *     page_views.avsc
 *     payroll_bonus.avsc
 *     payroll_employee.avsc
 *     payroll_employee_location.avsc
 *     pizza_orders.avsc
 *     pizza_orders_cancelled.avsc
 *     pizza_orders_completed.avsc
 *     product.avsc
 *     purchase.avsc
 *     ratings.avsc
 *     shoe.avsc
 *     shoe_clickstream.avsc
 *     shoe_customer.avsc
 *     shoe_order.avsc
 *     siemlogs.avsc
 *     stock_trade.avsc
 *     stores.avsc
 *     syslog_logs.avsc
 *     transactions.avsc
 *     user.avsc
 *     users.avsc
 */
package types

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DeviceInformation struct {
	Device_ip string `json:"device_ip"`

	Mac_address string `json:"mac_address"`

	Owner string `json:"owner"`
}

const DeviceInformationAvroCRC64Fingerprint = "[\x17\xd7\xef\v%\x1fQ"

func NewDeviceInformation() DeviceInformation {
	r := DeviceInformation{}
	return r
}

func DeserializeDeviceInformation(r io.Reader) (DeviceInformation, error) {
	t := NewDeviceInformation()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDeviceInformationFromSchema(r io.Reader, schema string) (DeviceInformation, error) {
	t := NewDeviceInformation()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDeviceInformation(r DeviceInformation, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Device_ip, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Mac_address, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Owner, w)
	if err != nil {
		return err
	}
	return err
}

func (r DeviceInformation) Serialize(w io.Writer) error {
	return writeDeviceInformation(r, w)
}

func (r DeviceInformation) Schema() string {
	return "{\"fields\":[{\"name\":\"device_ip\",\"type\":{\"arg.properties\":{\"options\":[\"204.149.41.63\",\"54.222.176.193\",\"122.120.109.66\",\"59.145.93.29\",\"222.85.75.48\",\"68.70.120.23\",\"8.243.217.97\",\"47.82.29.180\",\"182.23.41.165\",\"230.195.181.37\",\"45.206.35.54\",\"59.222.135.27\",\"178.74.178.202\",\"112.10.11.67\",\"231.62.195.226\",\"56.25.171.14\",\"72.206.143.236\",\"101.162.21.103\",\"98.24.15.221\",\"109.151.30.96\",\"67.143.145.10\",\"161.110.198.55\",\"56.186.158.4\",\"215.63.183.99\",\"173.218.229.93\",\"119.0.185.169\",\"13.206.166.235\",\"17.208.177.68\",\"230.234.177.180\",\"177.83.69.26\",\"109.78.222.30\",\"232.59.60.147\",\"250.173.99.68\",\"4.75.226.124\",\"174.185.97.9\",\"214.15.142.138\",\"84.46.49.248\",\"189.150.30.47\",\"226.178.139.46\",\"167.153.109.224\",\"126.147.106.47\",\"157.200.87.61\",\"131.255.186.13\",\"152.102.102.68\",\"214.177.4.5\",\"161.166.90.144\",\"98.160.215.50\",\"210.74.249.137\",\"244.64.29.244\",\"68.227.6.52\",\"141.228.33.77\",\"33.207.45.196\",\"60.35.239.48\",\"25.88.68.126\",\"239.126.133.195\",\"173.13.57.55\",\"134.23.137.5\",\"120.48.50.185\",\"215.90.55.197\",\"23.97.205.108\",\"117.250.191.255\",\"165.188.33.225\",\"153.41.174.133\",\"42.252.99.100\",\"12.42.99.54\",\"237.83.9.240\",\"137.148.240.223\",\"113.9.0.63\",\"73.126.21.73\",\"70.109.118.28\",\"121.166.215.228\",\"15.128.133.129\",\"156.64.22.26\",\"74.31.184.80\",\"32.110.165.153\",\"3.84.77.181\",\"106.45.159.209\",\"49.33.192.133\",\"66.95.63.195\",\"242.252.182.130\",\"245.91.183.42\",\"120.121.18.230\",\"144.81.168.91\",\"206.219.105.117\",\"225.242.249.169\",\"66.153.168.58\",\"160.199.67.92\",\"53.124.103.36\",\"94.51.180.226\",\"60.179.124.207\",\"4.126.94.49\",\"127.136.244.28\",\"171.169.227.52\",\"137.204.219.247\",\"20.195.159.248\",\"97.217.72.152\",\"152.30.133.188\",\"173.79.61.56\",\"173.119.145.171\",\"149.135.212.84\"]},\"type\":\"string\"}},{\"name\":\"mac_address\",\"type\":{\"arg.properties\":{\"options\":[\"20-FC-45-56-D4-11\",\"DA-C5-32-E2-C1-8F\",\"52-FF-47-B2-4E-40\",\"10-7A-3D-D0-55-5E\",\"E1-36-4F-CC-07-D1\",\"B9-4B-F7-9A-BC-FB\",\"E4-26-F7-10-AF-55\",\"8A-C1-65-E1-96-26\",\"F8-E2-9D-20-DA-2B\",\"4F-B2-2D-63-35-D0\",\"0D-21-E6-36-2A-48\",\"2F-CE-2C-ED-A9-79\",\"2D-D0-DC-2D-68-E2\",\"6A-76-E5-12-BF-6F\",\"02-B6-B9-02-EF-1B\",\"16-61-3F-30-95-06\",\"08-FC-5B-DC-D7-EC\",\"0E-F9-E7-CD-23-E9\",\"41-E2-09-EE-07-85\",\"20-65-79-65-EA-E7\",\"8D-64-BD-87-DF-CF\",\"36-29-79-FD-02-34\",\"10-4A-A2-70-D3-9A\",\"71-66-76-88-10-E4\",\"38-FF-33-73-5B-11\",\"C6-E7-CA-9B-69-5C\",\"97-E3-BA-B2-47-77\",\"C0-1B-23-A1-96-24\",\"89-76-CC-72-C8-55\",\"78-26-55-A7-66-87\",\"D8-AA-BE-B3-B6-CC\",\"AF-3C-AA-F8-EF-E7\",\"2E-50-8F-9A-F0-B5\",\"D2-0B-7F-EC-A6-03\",\"7A-2E-17-17-D3-D1\",\"AD-9F-95-8C-D7-DB\",\"53-BE-22-01-C7-A6\",\"95-E4-54-28-7B-F9\",\"6F-5E-64-19-86-86\",\"50-10-5B-90-B1-95\",\"DD-BB-53-78-7F-A7\",\"6D-F7-05-28-48-8E\",\"84-50-36-FC-40-0F\",\"11-B4-74-C3-22-08\",\"24-BF-FE-8B-F9-D3\",\"3A-5C-C1-1A-03-0B\",\"44-CA-1C-94-1D-2A\",\"2E-7B-53-47-76-25\",\"6F-B9-B9-9B-08-05\",\"29-85-80-9B-4C-4A\"]},\"type\":\"string\"}},{\"name\":\"owner\",\"type\":{\"arg.properties\":{\"options\":[\"Frieda Baldi\",\"Cherrita Gallaccio\",\"Matt Cleugh\",\"Dulciana Murfill\",\"Germayne Streetley\",\"Brenna Woolfall\",\"Gerhardt Tenbrug\",\"Hayley Tuma\",\"Winny Cadigan\",\"Bonnibelle Macek\",\"Lionel Byneth\",\"Trev Roper\",\"Lena MacFadzean\",\"Benton Allcorn\",\"Avis Moyler\",\"Marchall Rochewell\",\"Adele Bohl\",\"Barnett Mcall\",\"Frieda Pirrone\",\"Pattin Eringey\",\"Kalila Fewings\",\"Giacobo Beuscher\",\"Rozalin Hair\",\"Egon Beagan\",\"Owen Strotton\",\"Fernando Rosensaft\",\"Carleton Gwyther\",\"Kata Coll\",\"Rossie Hobben\",\"Stephanie Gookey\",\"Robyn Milazzo\",\"Tilda O'Lunney\",\"Nolan Kidney\",\"Jori Ottiwill\",\"Benito Graveson\",\"Zechariah Wrate\",\"Chelsae Napton\",\"Jeremy Heffernon\",\"Derk McAviy\",\"Constantin Mears\",\"Fitz Ballin\",\"Essy Bettles\",\"Gene Klemt\",\"Nikolai Arnopp\",\"Gustave Westhofer\",\"Simona Mayhow\",\"Cort Bainbridge\",\"Sibyl Vockins\",\"Andriette Gaze\",\"Shaughn De Simoni\",\"Nathaniel Hallowell\",\"Charley Dudill\",\"Cirstoforo Joblin\",\"Hyacinthia Kinastan\",\"Dur Lasselle\",\"Gay Chadburn\",\"Livvie Hawyes\",\"Aldrich MacVay\",\"Riva Rossant\",\"Johanna Reichartz\",\"Trent Gantlett\",\"Aryn Haskell\",\"Byrann Barock\",\"Gerda Cleugher\",\"Sonnie Guildford\",\"Vergil Borge\",\"Lurline Rocco\",\"Geoff Eddy\",\"Zea Leighton\",\"Leif Baden\",\"Quint Bidgod\",\"Talbot Cashell\",\"Sheridan Foulsham\",\"Camile Shrimplin\",\"Marcel Nayshe\",\"Lea Murrish\",\"Lucais Midson\",\"Zeb Rylatt\",\"Nertie Zuker\",\"Babara Henderson\",\"Electra Ridgley\",\"Jere Standingford\",\"Cyril Yellowlea\",\"Isadora Peegrem\",\"Caria Smewings\",\"Karena Kauffman\",\"Haywood Snowball\",\"Winslow Starcks\",\"Alis Ponton\",\"Marietta Lezemere\",\"Emilee Broadbridge\",\"Faye Beaument\",\"Shannah Beatson\",\"West Doy\",\"Chryste Wren\",\"Trumann Labba\",\"Anatollo Beckwith\",\"Konstanze Dunsford\",\"Raychel Roset\",\"Heindrick Ravenscroft\"]},\"type\":\"string\"}}],\"name\":\"device_information.DeviceInformation\",\"type\":\"record\"}"
}

func (r DeviceInformation) SchemaName() string {
	return "device_information.DeviceInformation"
}

func (_ DeviceInformation) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DeviceInformation) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DeviceInformation) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DeviceInformation) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DeviceInformation) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DeviceInformation) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DeviceInformation) SetString(v string)   { panic("Unsupported operation") }
func (_ DeviceInformation) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DeviceInformation) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Device_ip}

		return w

	case 1:
		w := types.String{Target: &r.Mac_address}

		return w

	case 2:
		w := types.String{Target: &r.Owner}

		return w

	}
	panic("Unknown field index")
}

func (r *DeviceInformation) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *DeviceInformation) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ DeviceInformation) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DeviceInformation) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DeviceInformation) HintSize(int)                     { panic("Unsupported operation") }
func (_ DeviceInformation) Finalize()                        {}

func (_ DeviceInformation) AvroCRC64Fingerprint() []byte {
	return []byte(DeviceInformationAvroCRC64Fingerprint)
}

func (r DeviceInformation) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["device_ip"], err = json.Marshal(r.Device_ip)
	if err != nil {
		return nil, err
	}
	output["mac_address"], err = json.Marshal(r.Mac_address)
	if err != nil {
		return nil, err
	}
	output["owner"], err = json.Marshal(r.Owner)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DeviceInformation) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["device_ip"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Device_ip); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for device_ip")
	}
	val = func() json.RawMessage {
		if v, ok := fields["mac_address"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Mac_address); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for mac_address")
	}
	val = func() json.RawMessage {
		if v, ok := fields["owner"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Owner); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for owner")
	}
	return nil
}
